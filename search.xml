<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++中的new运算符</title>
      <link href="/2021/02/24/c-zhong-de-new-yun-suan-fu/"/>
      <url>/2021/02/24/c-zhong-de-new-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<p>C++中主要利用new操作符在堆区开辟数据，堆区开辟的数据，由程序员手动开辟&amp;释放，释放时利用操作符delete<br>语法：<code>new 数据类型</code><br><br>利用new创建的数据，会返回该数据对应的类型的指针<br><br>示例1：基本语法</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;int* func(){    int * a = new int(10); //new返回是 该数据类型的指针    return a;}int test01(){    int * p = func();    cout << *p << endl;    cout << *p << endl;    cout << *p << endl;    delete p;    //cout << *p << endl; //内存此时已经释放，再次访问属于非法操作，会报错}int main(){    test01();    //堆区的数据由程序员开辟或释放    //如果想释放堆区数据，可利用关键字delete}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2：在堆区利用new开辟数组</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;void test02(){    int * arr = new int[10]; //这个10代表此数组有10个元素    for(i=0 ; i<10 ; i++)    {        arr[i] = i + 100; //给10个元素分别赋值100~109    }    for(i=0 ; i<10 ; i++)    {        cout << arr[i] << endl;    }    //释放堆区数组    //释放数组要加上[]    delete[] arr;}int main(){    test02();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存的堆区</title>
      <link href="/2021/02/23/nei-cun-de-dui-qu/"/>
      <url>/2021/02/23/nei-cun-de-dui-qu/</url>
      
        <content type="html"><![CDATA[<p>堆区：由程序员分配释放，若程序员不释放，程序结束时由操作系统回收<br>在C++中主要用new开辟内存<br>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以利用new关键字将数据开辟到栈区</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> * p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>); <span class="comment">//new关键字会返回开辟到栈区的数据的地址，这时我们可以用指针来接收它</span></span><br><span class="line">    <span class="keyword">return</span> p; <span class="comment">//返回的指针自身本身是个局部变量，在栈区</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> * p = func();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>结果说明：只要不去主动释放堆区数据（代码释放或结束程序）它就会一直存在。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存的栈区</title>
      <link href="/2021/02/23/nei-cun-de-zhan-qu/"/>
      <url>/2021/02/23/nei-cun-de-zhan-qu/</url>
      
        <content type="html"><![CDATA[<p>栈区：由编译器自动分配释放，存放函数的参数值、局部变量等<br>注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> * p = func();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">267955168</span><br></pre></td></tr></table></figure><p>此时说明在第一次打印*p时编译器保留了局部变量a<br>但在第二次打印时数据不再保留<br>所以永远不要去返回局部变量的地址，形参数据也不要尝试返回它的地址</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存的全局区</title>
      <link href="/2021/02/21/nei-cun-de-quan-ju-qu/"/>
      <url>/2021/02/21/nei-cun-de-quan-ju-qu/</url>
      
        <content type="html"><![CDATA[<p>全局区的特点：全局区存放着全局变量和静态变量，还包含着常量区()，且该区域的数据在程序结束后由操作系统释放。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//const修饰的全局变量（全局常量）</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> e = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//局部变量</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//静态变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//字符串常量</span></span><br><span class="line">    <span class="string">"一段字符"</span></span><br><span class="line">    <span class="comment">//const修饰的局部变量（局部常量）</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> d = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部常量与局部变量在同一个区域内。<br>全局变量、静态变量、字符串变量、全局常量在一个区域（全局区）内。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
