<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内存的堆区</title>
      <link href="/2021/02/23/nei-cun-de-dui-qu/"/>
      <url>/2021/02/23/nei-cun-de-dui-qu/</url>
      
        <content type="html"><![CDATA[<p>堆区：由程序员分配释放，若程序员不释放，程序结束时由操作系统回收<br>在C++中主要用new开辟内存<br>示例：</p><pre class="line-numbers language-C++"><code class="language-C++">#include <iostream>using namespace std;//可以利用new关键字将数据开辟到栈区int * func(){    int * p = new int(10); //new关键字会返回开辟到栈区的数据的地址，这时我们可以用指针来接收它    return p; //返回的指针自身本身是个局部变量，在栈区}int main(){    int * p = func();    cout << *p << endl;    cout << *p << endl;    cout << *p << endl;    cout << *p << endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>运行结果：10101010</code></pre><p>结果说明：只要不去主动释放堆区数据（代码释放或结束程序）它就会一直存在。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存的栈区</title>
      <link href="/2021/02/23/nei-cun-de-zhan-qu/"/>
      <url>/2021/02/23/nei-cun-de-zhan-qu/</url>
      
        <content type="html"><![CDATA[<p>栈区：由编译器自动分配释放，存放函数的参数值、局部变量等<br>注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p><pre class="line-numbers language-C++"><code class="language-C++">#include <iostream>using namespace std;int* func(){    int a = 10;    return &a;}int main(){    int * p = func();    cout << *p << endl;    cout << *p << endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>运行结果：10267955168</code></pre><p>此时说明在第一次打印*p时编译器保留了局部变量a<br>但在第二次打印时数据不再保留<br>所以永远不要去返回局部变量的地址，形参数据也不要尝试返回它的地址</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存的全局区</title>
      <link href="/2021/02/21/nei-cun-de-quan-ju-qu/"/>
      <url>/2021/02/21/nei-cun-de-quan-ju-qu/</url>
      
        <content type="html"><![CDATA[<p>全局区的特点：全局区存放着全局变量和静态变量，还包含着常量区()，且该区域的数据在程序结束后由操作系统释放。</p><pre class="line-numbers language-C++"><code class="language-C++">//全局变量int a = 1;//const修饰的全局变量（全局常量）const int e = 1;int main(){    //局部变量    int b = 1;    //静态变量    static int c = 1;    //字符串常量    "一段字符"    //const修饰的局部变量（局部常量）    const int d = 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>局部常量与局部变量在同一个区域内。<br>全局变量、静态变量、字符串变量、全局常量在一个区域（全局区）内。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
